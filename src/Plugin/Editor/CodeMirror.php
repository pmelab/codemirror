<?php

/**
 * @file
 * Contains \Drupal\codemirror\Plugin\Editor\CodeMirror.
 */

namespace Drupal\codemirror\Plugin\Editor;

use Drupal\codemirror\CodeMirrorModeManager;
use Drupal\Component\Plugin\PluginManagerInterface;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Annotation\Translation;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Plugin\DefaultPluginManager;
use Drupal\editor\Annotation\Editor;
use Drupal\editor\Plugin\EditorBase;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Defines a CodeMirror text editor for Drupal.
 *
 * @Editor(
 *   id = "codemirror",
 *   label = @Translation("CodeMirror"),
 *   supports_content_filtering = TRUE,
 *   supports_inline_editing = TRUE,
 *   is_xss_safe = FALSE
 * )
 */
class CodeMirror extends EditorBase implements ContainerFactoryPluginInterface {

  protected $modeManager;

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('plugin.manager.codemirror')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginManagerInterface $plugin_manager) {
    parent::__construct($configuration, $plugin_id, $plugin_definition); // TODO: Change the autogenerated stub
    $this->pluginManager = $plugin_manager;
  }



  /**
   * {@inheritdoc}
   */
  public function getJSSettings(\Drupal\editor\Entity\Editor $editor) {
    return $editor->getSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function getDefaultSettings() {
    return array(
      // 'null' is the internal identifier for CodeMirrors plaintext mode.
      'mode' => 'null',
      'theme' => 'default',
      'indentUnit' => 2,
      'smartIndent' => TRUE,
      'tabSize' => 4,
      'indentWithTabs' => FALSE,
      'electricChars' => TRUE,
      'lineWrapping' => FALSE,
      'lineNumbers' => FALSE,
    );
  }


  /**
   * {@inheritdoc}
   */
  public function settingsForm(array $form, FormStateInterface $form_state, \Drupal\editor\Entity\Editor $editor) {
    $settings = $editor->getSettings();

    $form['settings'] = array(
      '#type' => 'vertical_tabs',
      '#title' => t('CodeMirror settings'),
      '#parents' => array('settings'),
    );

    $form['basics'] = array(
      '#type' => 'details',
      '#title' => t('Basics'),
      '#group' => 'settings',
    );
    $basics = &$form['basics'];


    $basics['mode'] = array(
      '#type' => 'select',
      '#title' => t('Mode'),
      '#options' => array(),
      '#default_value' => $settings['mode'],
    );

    $basics['theme'] = array(
      '#type' => 'select',
      '#title' => t('Theme'),
      '#options' => array(),
      '#default_value' => $settings['theme'],
    );

    foreach ($this->pluginManager->getDefinitions() as $plugin) {
      $basics[$plugin['type']]['#options'][$plugin['id']] = $plugin['label'];
    }

    $form['indentation'] = array(
      '#type' => 'details',
      '#title' => t('Indentation'),
      '#group' => 'settings',
    );

    $indentation = &$form['indentation'];

    $indentation['indentUnit'] = array(
      '#type' => 'number',
      '#title' => t('Indent Unit'),
      '#description' => t('How many spaces a block (whatever that means in the edited language) should be indented.'),
      '#default_value' => $settings['indentUnit'],
    );

    $indentation['tabSize'] = array(
      '#type' => 'number',
      '#title' => t('Tab size'),
      '#description' => t('The width of a tab character.'),
      '#default_value' => $settings['tabSize'],
    );

    $indentation['indentWithTabs'] = array(
      '#type' => 'checkbox',
      '#title' => t('Indent with tabs'),
      '#description' => t('Whether, when indenting, the first N*tabSize spaces should be replaced by N tabs.'),
      '#default_value' => $settings['indentWithTabs'],
    );


    $form['behavior'] = array(
      '#type' => 'details',
      '#title' => t('Behavior'),
      '#group' => 'settings',
    );

    $behavior = &$form['behavior'];

    $behavior['electricChars'] = array(
      '#type' => 'checkbox',
      '#title' => t('Electric chars'),
      '#description' => t('Configures whether the editor should re-indent the current line when a character is typed that might change its proper indentation (only works if the mode supports indentation).'),
      '#default_value' => $settings['electricChars'],
    );

    $behavior['lineWrapping'] = array(
      '#type' => 'checkbox',
      '#title' => t('Line wrapping'),
      '#description' => t('Whether CodeMirror should scroll or wrap for long lines.'),
      '#default_value' => $settings['lineWrapping'],
    );

    $behavior['lineNumbers'] = array(
      '#type' => 'checkbox',
      '#title' => t('Line numbers'),
      '#description' => t('Whether to show line numbers to the left of the editor.'),
      '#default_value' => $settings['lineNumbers'],
    );

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function settingsFormValidate(array $form, FormStateInterface $form_state) {
    // Flatten fieldsets
    // TODO: Find better solution. Form API doesn'nt support this?
    foreach ($form_state['values']['editor']['settings'] as $key => $group) {
      unset($form_state['values']['editor']['settings'][$key]);
      foreach ($group as $name => $setting) {
        $form_state['values']['editor']['settings'][$name] = $setting;
      }
    }
    if ($form['indentation']['tabSize']['#value'] < 1) {
      $form_state->setError($form['indentation']['tabSize'], t('Tab size has to be higher than 0.'));
    }
    if ($form['indentation']['indentUnit']['#value'] < 1) {
      $form_state->setError($form['indentUnit']['tabSize'], t('Tab size has to be higher than 0.'));
    }
  }

  /**
   * {@inheritdoc}
   */
  public function getLibraries(\Drupal\editor\Entity\Editor $editor) {
    $settings = $editor->getSettings();

    $libraries = array(
      'codemirror/drupal.codemirror',
      'codemirror/codemirror.plugin.' . $settings['mode'],
      'codemirror/codemirror.plugin.' . $settings['theme'],
    );

    return $libraries;
  }
}